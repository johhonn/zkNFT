/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SemaphoreVotingInterface extends utils.Interface {
  contractName: "SemaphoreVoting";
  functions: {
    "addVoter(uint256,uint256)": FunctionFragment;
    "castVote(bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "createPoll(uint256,address,uint8)": FunctionFragment;
    "endPoll(uint256,uint256)": FunctionFragment;
    "getDepth(uint256)": FunctionFragment;
    "getNumberOfLeaves(uint256)": FunctionFragment;
    "getRoot(uint256)": FunctionFragment;
    "startPoll(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addVoter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoll",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endPoll",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfLeaves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startPoll",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDepth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startPoll", data: BytesLike): Result;

  events: {
    "GroupCreated(uint256,uint8,uint256)": EventFragment;
    "MemberAdded(uint256,uint256,uint256)": EventFragment;
    "MemberRemoved(uint256,uint256,uint256)": EventFragment;
    "NullifierHashAdded(uint256)": EventFragment;
    "PollCreated(uint256,address)": EventFragment;
    "PollEnded(uint256,address,uint256)": EventFragment;
    "PollStarted(uint256,address,uint256)": EventFragment;
    "VoteAdded(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NullifierHashAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PollCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PollEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PollStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteAdded"): EventFragment;
}

export type GroupCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  { groupId: BigNumber; depth: number; zeroValue: BigNumber }
>;

export type GroupCreatedEventFilter = TypedEventFilter<GroupCreatedEvent>;

export type MemberAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { groupId: BigNumber; identityCommitment: BigNumber; root: BigNumber }
>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export type MemberRemovedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { groupId: BigNumber; identityCommitment: BigNumber; root: BigNumber }
>;

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;

export type NullifierHashAddedEvent = TypedEvent<
  [BigNumber],
  { nullifierHash: BigNumber }
>;

export type NullifierHashAddedEventFilter =
  TypedEventFilter<NullifierHashAddedEvent>;

export type PollCreatedEvent = TypedEvent<
  [BigNumber, string],
  { pollId: BigNumber; coordinator: string }
>;

export type PollCreatedEventFilter = TypedEventFilter<PollCreatedEvent>;

export type PollEndedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { pollId: BigNumber; coordinator: string; decryptionKey: BigNumber }
>;

export type PollEndedEventFilter = TypedEventFilter<PollEndedEvent>;

export type PollStartedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { pollId: BigNumber; coordinator: string; encryptionKey: BigNumber }
>;

export type PollStartedEventFilter = TypedEventFilter<PollStartedEvent>;

export type VoteAddedEvent = TypedEvent<
  [BigNumber, string],
  { pollId: BigNumber; vote: string }
>;

export type VoteAddedEventFilter = TypedEventFilter<VoteAddedEvent>;

export interface SemaphoreVoting extends BaseContract {
  contractName: "SemaphoreVoting";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SemaphoreVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVoter(
      pollId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      vote: BytesLike,
      nullifierHash: BigNumberish,
      pollId: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPoll(
      pollId: BigNumberish,
      coordinator: string,
      depth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endPoll(
      pollId: BigNumberish,
      decryptionKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startPoll(
      pollId: BigNumberish,
      encryptionKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addVoter(
    pollId: BigNumberish,
    identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    vote: BytesLike,
    nullifierHash: BigNumberish,
    pollId: BigNumberish,
    proof: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPoll(
    pollId: BigNumberish,
    coordinator: string,
    depth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endPoll(
    pollId: BigNumberish,
    decryptionKey: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDepth(groupId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getNumberOfLeaves(
    groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoot(groupId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  startPoll(
    pollId: BigNumberish,
    encryptionKey: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addVoter(
      pollId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      vote: BytesLike,
      nullifierHash: BigNumberish,
      pollId: BigNumberish,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createPoll(
      pollId: BigNumberish,
      coordinator: string,
      depth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endPoll(
      pollId: BigNumberish,
      decryptionKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepth(groupId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startPoll(
      pollId: BigNumberish,
      encryptionKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GroupCreated(uint256,uint8,uint256)"(
      groupId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null
    ): GroupCreatedEventFilter;
    GroupCreated(
      groupId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null
    ): GroupCreatedEventFilter;

    "MemberAdded(uint256,uint256,uint256)"(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): MemberAddedEventFilter;
    MemberAdded(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): MemberAddedEventFilter;

    "MemberRemoved(uint256,uint256,uint256)"(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): MemberRemovedEventFilter;
    MemberRemoved(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): MemberRemovedEventFilter;

    "NullifierHashAdded(uint256)"(
      nullifierHash?: null
    ): NullifierHashAddedEventFilter;
    NullifierHashAdded(nullifierHash?: null): NullifierHashAddedEventFilter;

    "PollCreated(uint256,address)"(
      pollId?: null,
      coordinator?: string | null
    ): PollCreatedEventFilter;
    PollCreated(
      pollId?: null,
      coordinator?: string | null
    ): PollCreatedEventFilter;

    "PollEnded(uint256,address,uint256)"(
      pollId?: null,
      coordinator?: string | null,
      decryptionKey?: null
    ): PollEndedEventFilter;
    PollEnded(
      pollId?: null,
      coordinator?: string | null,
      decryptionKey?: null
    ): PollEndedEventFilter;

    "PollStarted(uint256,address,uint256)"(
      pollId?: null,
      coordinator?: string | null,
      encryptionKey?: null
    ): PollStartedEventFilter;
    PollStarted(
      pollId?: null,
      coordinator?: string | null,
      encryptionKey?: null
    ): PollStartedEventFilter;

    "VoteAdded(uint256,bytes32)"(
      pollId?: BigNumberish | null,
      vote?: null
    ): VoteAddedEventFilter;
    VoteAdded(pollId?: BigNumberish | null, vote?: null): VoteAddedEventFilter;
  };

  estimateGas: {
    addVoter(
      pollId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      vote: BytesLike,
      nullifierHash: BigNumberish,
      pollId: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPoll(
      pollId: BigNumberish,
      coordinator: string,
      depth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endPoll(
      pollId: BigNumberish,
      decryptionKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startPoll(
      pollId: BigNumberish,
      encryptionKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVoter(
      pollId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      vote: BytesLike,
      nullifierHash: BigNumberish,
      pollId: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPoll(
      pollId: BigNumberish,
      coordinator: string,
      depth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endPoll(
      pollId: BigNumberish,
      decryptionKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startPoll(
      pollId: BigNumberish,
      encryptionKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
